using System;
using System.Collections.Generic;
using Hl7.Fhir.Support;
using System.Xml.Linq;
using System.Linq;

/*
  Copyright (c) 2011-2013, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  

*/

//
// Generated on Wed, Oct 2, 2013 07:37+1000 for FHIR v0.11
//

using Hl7.Fhir.Model;
using System.Xml;

namespace Hl7.Fhir.Model
{
    /*
    * A class with methods to retrieve informationa about the
    * FHIR definitions based on which this assembly was generated.
    */
    public static partial class ModelInfo
    {
        public static List<string> SupportedResources = 
            new List<string>
            {
                "AdverseReaction",
                "Alert",
                "AllergyIntolerance",
                "CarePlan",
                "Condition",
                "Conformance",
                "Coverage",
                "Device",
                "DeviceCapabilities",
                "DeviceLog",
                "DeviceObservation",
                "DiagnosticOrder",
                "DiagnosticReport",
                "Document",
                "DocumentReference",
                "Encounter",
                "FamilyHistory",
                "Group",
                "ImagingStudy",
                "Immunization",
                "ImmunizationProfile",
                "List",
                "Location",
                "Media",
                "Medication",
                "MedicationAdministration",
                "MedicationDispense",
                "MedicationPrescription",
                "MedicationStatement",
                "Message",
                "Observation",
                "OperationOutcome",
                "Order",
                "OrderResponse",
                "Organization",
                "Other",
                "Patient",
                "Practitioner",
                "Procedure",
                "Profile",
                "Provenance",
                "Query",
                "Questionnaire",
                "RelatedPerson",
                "SecurityEvent",
                "Specimen",
                "Substance",
                "Supply",
                "ValueSet",
                "Binary",
                "Appointment",
                "InterestOfCare",
            };
        
        public static string Version
        {
            get { return "0.11"; }
        }
        
        public static Dictionary<string,Type> FhirTypeToCsType =
            new Dictionary<string,Type>()
            {
                { "Address", typeof(Hl7.Fhir.Model.Address) },
                { "Age", typeof(Hl7.Fhir.Model.Age) },
                { "Attachment", typeof(Hl7.Fhir.Model.Attachment) },
                { "Choice", typeof(Hl7.Fhir.Model.Choice) },
                { "CodeableConcept", typeof(Hl7.Fhir.Model.CodeableConcept) },
                { "Coding", typeof(Hl7.Fhir.Model.Coding) },
                { "Contact", typeof(Hl7.Fhir.Model.Contact) },
                { "Count", typeof(Hl7.Fhir.Model.Count) },
                { "Distance", typeof(Hl7.Fhir.Model.Distance) },
                { "Duration", typeof(Hl7.Fhir.Model.Duration) },
                { "Element", typeof(Hl7.Fhir.Model.Element) },
                { "Extension", typeof(Hl7.Fhir.Model.Extension) },
                { "HumanName", typeof(Hl7.Fhir.Model.HumanName) },
                { "Identifier", typeof(Hl7.Fhir.Model.Identifier) },
                { "Money", typeof(Hl7.Fhir.Model.Money) },
                { "Narrative", typeof(Hl7.Fhir.Model.Narrative) },
                { "Period", typeof(Hl7.Fhir.Model.Period) },
                { "Quantity", typeof(Hl7.Fhir.Model.Quantity) },
                { "Range", typeof(Hl7.Fhir.Model.Range) },
                { "Ratio", typeof(Hl7.Fhir.Model.Ratio) },
                { "ResourceReference", typeof(Hl7.Fhir.Model.ResourceReference) },
                { "SampledData", typeof(Hl7.Fhir.Model.SampledData) },
                { "Schedule", typeof(Hl7.Fhir.Model.Schedule) },
                { "base64Binary", typeof(Hl7.Fhir.Model.Base64Binary) },
                { "boolean", typeof(Hl7.Fhir.Model.FhirBoolean) },
                { "code", typeof(Hl7.Fhir.Model.Code) },
                { "date", typeof(Hl7.Fhir.Model.Date) },
                { "dateTime", typeof(Hl7.Fhir.Model.FhirDateTime) },
                { "decimal", typeof(Hl7.Fhir.Model.FhirDecimal) },
                { "id", typeof(Hl7.Fhir.Model.Id) },
                { "idref", typeof(Hl7.Fhir.Model.IdRef) },
                { "instant", typeof(Hl7.Fhir.Model.Instant) },
                { "integer", typeof(Hl7.Fhir.Model.Integer) },
                { "oid", typeof(Hl7.Fhir.Model.Oid) },
                { "string", typeof(Hl7.Fhir.Model.FhirString) },
                { "uri", typeof(Hl7.Fhir.Model.FhirUri) },
                { "uuid", typeof(Hl7.Fhir.Model.Uuid) },
                { "xhtml", typeof(Hl7.Fhir.Model.XHtml) },
                { "Resource", typeof(Hl7.Fhir.Model.Resource) },
                { "AdverseReaction", typeof(Hl7.Fhir.Model.AdverseReaction) },
                { "Alert", typeof(Hl7.Fhir.Model.Alert) },
                { "AllergyIntolerance", typeof(Hl7.Fhir.Model.AllergyIntolerance) },
                { "CarePlan", typeof(Hl7.Fhir.Model.CarePlan) },
                { "Condition", typeof(Hl7.Fhir.Model.Condition) },
                { "Conformance", typeof(Hl7.Fhir.Model.Conformance) },
                { "Coverage", typeof(Hl7.Fhir.Model.Coverage) },
                { "Device", typeof(Hl7.Fhir.Model.Device) },
                { "DeviceCapabilities", typeof(Hl7.Fhir.Model.DeviceCapabilities) },
                { "DeviceLog", typeof(Hl7.Fhir.Model.DeviceLog) },
                { "DeviceObservation", typeof(Hl7.Fhir.Model.DeviceObservation) },
                { "DiagnosticOrder", typeof(Hl7.Fhir.Model.DiagnosticOrder) },
                { "DiagnosticReport", typeof(Hl7.Fhir.Model.DiagnosticReport) },
                { "Document", typeof(Hl7.Fhir.Model.Document) },
                { "DocumentReference", typeof(Hl7.Fhir.Model.DocumentReference) },
                { "Encounter", typeof(Hl7.Fhir.Model.Encounter) },
                { "FamilyHistory", typeof(Hl7.Fhir.Model.FamilyHistory) },
                { "Group", typeof(Hl7.Fhir.Model.Group) },
                { "ImagingStudy", typeof(Hl7.Fhir.Model.ImagingStudy) },
                { "Immunization", typeof(Hl7.Fhir.Model.Immunization) },
                { "ImmunizationProfile", typeof(Hl7.Fhir.Model.ImmunizationProfile) },
                { "List", typeof(Hl7.Fhir.Model.List) },
                { "Location", typeof(Hl7.Fhir.Model.Location) },
                { "Media", typeof(Hl7.Fhir.Model.Media) },
                { "Medication", typeof(Hl7.Fhir.Model.Medication) },
                { "MedicationAdministration", typeof(Hl7.Fhir.Model.MedicationAdministration) },
                { "MedicationDispense", typeof(Hl7.Fhir.Model.MedicationDispense) },
                { "MedicationPrescription", typeof(Hl7.Fhir.Model.MedicationPrescription) },
                { "MedicationStatement", typeof(Hl7.Fhir.Model.MedicationStatement) },
                { "Message", typeof(Hl7.Fhir.Model.Message) },
                { "Observation", typeof(Hl7.Fhir.Model.Observation) },
                { "OperationOutcome", typeof(Hl7.Fhir.Model.OperationOutcome) },
                { "Order", typeof(Hl7.Fhir.Model.Order) },
                { "OrderResponse", typeof(Hl7.Fhir.Model.OrderResponse) },
                { "Organization", typeof(Hl7.Fhir.Model.Organization) },
                { "Other", typeof(Hl7.Fhir.Model.Other) },
                { "Patient", typeof(Hl7.Fhir.Model.Patient) },
                { "Practitioner", typeof(Hl7.Fhir.Model.Practitioner) },
                { "Procedure", typeof(Hl7.Fhir.Model.Procedure) },
                { "Profile", typeof(Hl7.Fhir.Model.Profile) },
                { "Provenance", typeof(Hl7.Fhir.Model.Provenance) },
                { "Query", typeof(Hl7.Fhir.Model.Query) },
                { "Questionnaire", typeof(Hl7.Fhir.Model.Questionnaire) },
                { "RelatedPerson", typeof(Hl7.Fhir.Model.RelatedPerson) },
                { "SecurityEvent", typeof(Hl7.Fhir.Model.SecurityEvent) },
                { "Specimen", typeof(Hl7.Fhir.Model.Specimen) },
                { "Substance", typeof(Hl7.Fhir.Model.Substance) },
                { "Supply", typeof(Hl7.Fhir.Model.Supply) },
                { "ValueSet", typeof(Hl7.Fhir.Model.ValueSet) },
                { "Binary", typeof(Hl7.Fhir.Model.Binary) },
                { "Appointment", typeof(Hl7.Fhir.Model.Appointment) },
                { "InterestOfCare", typeof(Hl7.Fhir.Model.InterestOfCare) },
            };
        
        public static Dictionary<Type,string> FhirCsTypeToString =
            new Dictionary<Type,string>()
            {
                { typeof(Hl7.Fhir.Model.Address), "Address" },
                { typeof(Hl7.Fhir.Model.Age), "Age" },
                { typeof(Hl7.Fhir.Model.Attachment), "Attachment" },
                { typeof(Hl7.Fhir.Model.Choice), "Choice" },
                { typeof(Hl7.Fhir.Model.CodeableConcept), "CodeableConcept" },
                { typeof(Hl7.Fhir.Model.Coding), "Coding" },
                { typeof(Hl7.Fhir.Model.Contact), "Contact" },
                { typeof(Hl7.Fhir.Model.Count), "Count" },
                { typeof(Hl7.Fhir.Model.Distance), "Distance" },
                { typeof(Hl7.Fhir.Model.Duration), "Duration" },
                { typeof(Hl7.Fhir.Model.Element), "Element" },
                { typeof(Hl7.Fhir.Model.Extension), "Extension" },
                { typeof(Hl7.Fhir.Model.HumanName), "HumanName" },
                { typeof(Hl7.Fhir.Model.Identifier), "Identifier" },
                { typeof(Hl7.Fhir.Model.Money), "Money" },
                { typeof(Hl7.Fhir.Model.Narrative), "Narrative" },
                { typeof(Hl7.Fhir.Model.Period), "Period" },
                { typeof(Hl7.Fhir.Model.Quantity), "Quantity" },
                { typeof(Hl7.Fhir.Model.Range), "Range" },
                { typeof(Hl7.Fhir.Model.Ratio), "Ratio" },
                { typeof(Hl7.Fhir.Model.ResourceReference), "ResourceReference" },
                { typeof(Hl7.Fhir.Model.SampledData), "SampledData" },
                { typeof(Hl7.Fhir.Model.Schedule), "Schedule" },
                { typeof(Hl7.Fhir.Model.Base64Binary), "base64Binary" },
                { typeof(Hl7.Fhir.Model.FhirBoolean), "boolean" },
                { typeof(Hl7.Fhir.Model.Code), "code" },
                { typeof(Hl7.Fhir.Model.Date), "date" },
                { typeof(Hl7.Fhir.Model.FhirDateTime), "dateTime" },
                { typeof(Hl7.Fhir.Model.FhirDecimal), "decimal" },
                { typeof(Hl7.Fhir.Model.Id), "id" },
                { typeof(Hl7.Fhir.Model.IdRef), "idref" },
                { typeof(Hl7.Fhir.Model.Instant), "instant" },
                { typeof(Hl7.Fhir.Model.Integer), "integer" },
                { typeof(Hl7.Fhir.Model.Oid), "oid" },
                { typeof(Hl7.Fhir.Model.FhirString), "string" },
                { typeof(Hl7.Fhir.Model.FhirUri), "uri" },
                { typeof(Hl7.Fhir.Model.Uuid), "uuid" },
                { typeof(Hl7.Fhir.Model.XHtml), "xhtml" },
                { typeof(Hl7.Fhir.Model.Resource), "Resource" },
                { typeof(Hl7.Fhir.Model.AdverseReaction), "AdverseReaction" },
                { typeof(Hl7.Fhir.Model.Alert), "Alert" },
                { typeof(Hl7.Fhir.Model.AllergyIntolerance), "AllergyIntolerance" },
                { typeof(Hl7.Fhir.Model.CarePlan), "CarePlan" },
                { typeof(Hl7.Fhir.Model.Condition), "Condition" },
                { typeof(Hl7.Fhir.Model.Conformance), "Conformance" },
                { typeof(Hl7.Fhir.Model.Coverage), "Coverage" },
                { typeof(Hl7.Fhir.Model.Device), "Device" },
                { typeof(Hl7.Fhir.Model.DeviceCapabilities), "DeviceCapabilities" },
                { typeof(Hl7.Fhir.Model.DeviceLog), "DeviceLog" },
                { typeof(Hl7.Fhir.Model.DeviceObservation), "DeviceObservation" },
                { typeof(Hl7.Fhir.Model.DiagnosticOrder), "DiagnosticOrder" },
                { typeof(Hl7.Fhir.Model.DiagnosticReport), "DiagnosticReport" },
                { typeof(Hl7.Fhir.Model.Document), "Document" },
                { typeof(Hl7.Fhir.Model.DocumentReference), "DocumentReference" },
                { typeof(Hl7.Fhir.Model.Encounter), "Encounter" },
                { typeof(Hl7.Fhir.Model.FamilyHistory), "FamilyHistory" },
                { typeof(Hl7.Fhir.Model.Group), "Group" },
                { typeof(Hl7.Fhir.Model.ImagingStudy), "ImagingStudy" },
                { typeof(Hl7.Fhir.Model.Immunization), "Immunization" },
                { typeof(Hl7.Fhir.Model.ImmunizationProfile), "ImmunizationProfile" },
                { typeof(Hl7.Fhir.Model.List), "List" },
                { typeof(Hl7.Fhir.Model.Location), "Location" },
                { typeof(Hl7.Fhir.Model.Media), "Media" },
                { typeof(Hl7.Fhir.Model.Medication), "Medication" },
                { typeof(Hl7.Fhir.Model.MedicationAdministration), "MedicationAdministration" },
                { typeof(Hl7.Fhir.Model.MedicationDispense), "MedicationDispense" },
                { typeof(Hl7.Fhir.Model.MedicationPrescription), "MedicationPrescription" },
                { typeof(Hl7.Fhir.Model.MedicationStatement), "MedicationStatement" },
                { typeof(Hl7.Fhir.Model.Message), "Message" },
                { typeof(Hl7.Fhir.Model.Observation), "Observation" },
                { typeof(Hl7.Fhir.Model.OperationOutcome), "OperationOutcome" },
                { typeof(Hl7.Fhir.Model.Order), "Order" },
                { typeof(Hl7.Fhir.Model.OrderResponse), "OrderResponse" },
                { typeof(Hl7.Fhir.Model.Organization), "Organization" },
                { typeof(Hl7.Fhir.Model.Other), "Other" },
                { typeof(Hl7.Fhir.Model.Patient), "Patient" },
                { typeof(Hl7.Fhir.Model.Practitioner), "Practitioner" },
                { typeof(Hl7.Fhir.Model.Procedure), "Procedure" },
                { typeof(Hl7.Fhir.Model.Profile), "Profile" },
                { typeof(Hl7.Fhir.Model.Provenance), "Provenance" },
                { typeof(Hl7.Fhir.Model.Query), "Query" },
                { typeof(Hl7.Fhir.Model.Questionnaire), "Questionnaire" },
                { typeof(Hl7.Fhir.Model.RelatedPerson), "RelatedPerson" },
                { typeof(Hl7.Fhir.Model.SecurityEvent), "SecurityEvent" },
                { typeof(Hl7.Fhir.Model.Specimen), "Specimen" },
                { typeof(Hl7.Fhir.Model.Substance), "Substance" },
                { typeof(Hl7.Fhir.Model.Supply), "Supply" },
                { typeof(Hl7.Fhir.Model.ValueSet), "ValueSet" },
                { typeof(Hl7.Fhir.Model.Binary), "Binary" },
                { typeof(Hl7.Fhir.Model.Appointment), "Appointment" },
                { typeof(Hl7.Fhir.Model.InterestOfCare), "InterestOfCare" },
            };
        
        public static List<SearchParam> SearchParameters = 
            new List<SearchParam>
            {
                new SearchParam() { Resource = "AdverseReaction", Name = "substance", Description = @"The name or code of the substance that produces the sensitivity", Type = ParamType.Reference, Elements = new string[] { "AdverseReaction.exposure.substance", } }, 
                new SearchParam() { Resource = "AdverseReaction", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "AdverseReaction", Name = "subject", Description = @"The subject that the sensitivity is about", Type = ParamType.Reference, Elements = new string[] { "AdverseReaction.subject", } }, 
                new SearchParam() { Resource = "AdverseReaction", Name = "date", Description = @"the date of the reaction", Type = ParamType.Date, Elements = new string[] { "AdverseReaction.reactionDate", } }, 
                new SearchParam() { Resource = "AdverseReaction", Name = "symptom", Description = @"One of the symptoms of the reaction.", Type = ParamType.Token, Elements = new string[] { "AdverseReaction.symptom.code", } }, 
                new SearchParam() { Resource = "Alert", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Alert", Name = "subject", Description = @"The identity of a subject to list alerts for", Type = ParamType.Reference, Elements = new string[] { "Alert.subject", } }, 
                new SearchParam() { Resource = "AllergyIntolerance", Name = "substance", Description = @"The name or code of the substance that produces the sensitivity", Type = ParamType.Reference, Elements = new string[] { "AllergyIntolerance.substance", } }, 
                new SearchParam() { Resource = "AllergyIntolerance", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "AllergyIntolerance", Name = "status", Description = @"The status of the sensitivity", Type = ParamType.Token, Elements = new string[] { "AllergyIntolerance.status", } }, 
                new SearchParam() { Resource = "AllergyIntolerance", Name = "recorder", Description = @"who recorded the sensitivity", Type = ParamType.Reference, Elements = new string[] { "AllergyIntolerance.recorder", } }, 
                new SearchParam() { Resource = "AllergyIntolerance", Name = "subject", Description = @"The subject that the sensitivity is about", Type = ParamType.Reference, Elements = new string[] { "AllergyIntolerance.subject", } }, 
                new SearchParam() { Resource = "AllergyIntolerance", Name = "date", Description = @"recorded date/time.", Type = ParamType.Date, Elements = new string[] { "AllergyIntolerance.recordedDate", } }, 
                new SearchParam() { Resource = "AllergyIntolerance", Name = "type", Description = @"The type of sensitivity", Type = ParamType.Token, Elements = new string[] { "AllergyIntolerance.sensitivityType", } }, 
                new SearchParam() { Resource = "CarePlan", Name = "patient", Description = @"[CarePlan.patient]", Type = ParamType.Reference, Elements = new string[] { "CarePlan.patient", } }, 
                new SearchParam() { Resource = "CarePlan", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "CarePlan", Name = "condition", Description = @"[CarePlan.concern]", Type = ParamType.Reference, Elements = new string[] { "CarePlan.concern", } }, 
                new SearchParam() { Resource = "CarePlan", Name = "activitydate", Description = @"Specified date occurs within period specified by CarePlan.activity.timingSchedule", Type = ParamType.Date }, 
                new SearchParam() { Resource = "CarePlan", Name = "participant", Description = @"[CarePlan.participant.member]", Type = ParamType.Reference, Elements = new string[] { "CarePlan.participant.member", } }, 
                new SearchParam() { Resource = "CarePlan", Name = "date", Description = @"[CarePlan.period] contains date", Type = ParamType.Date, Elements = new string[] { "CarePlan.period", } }, 
                new SearchParam() { Resource = "CarePlan", Name = "activity", Description = @"[CarePlan.activity.code]", Type = ParamType.Token, Elements = new string[] { "CarePlan.activity.code", } }, 
                new SearchParam() { Resource = "Condition", Name = "asserter", Description = @"Person who asserts this condition", Type = ParamType.Reference, Elements = new string[] { "Condition.asserter", } }, 
                new SearchParam() { Resource = "Condition", Name = "status", Description = @"the status of the condition", Type = ParamType.Token, Elements = new string[] { "Condition.status", } }, 
                new SearchParam() { Resource = "Condition", Name = "location", Description = @"Location - may include laterality", Type = ParamType.Token, Elements = new string[] { "Condition.location.code", } }, 
                new SearchParam() { Resource = "Condition", Name = "subject", Description = @"Subject of this condition", Type = ParamType.Reference, Elements = new string[] { "Condition.subject", } }, 
                new SearchParam() { Resource = "Condition", Name = "onset", Description = @"when the Condition started (if started on a date)", Type = ParamType.Date, Elements = new string[] { "Condition.onset[x]", } }, 
                new SearchParam() { Resource = "Condition", Name = "evidence", Description = @"Manifestation/symptom", Type = ParamType.Token, Elements = new string[] { "Condition.evidence.code", } }, 
                new SearchParam() { Resource = "Condition", Name = "severity", Description = @"the severity of the condition", Type = ParamType.Token, Elements = new string[] { "Condition.severity", } }, 
                new SearchParam() { Resource = "Condition", Name = "code", Description = @"code for the condition", Type = ParamType.Token, Elements = new string[] { "Condition.code", } }, 
                new SearchParam() { Resource = "Condition", Name = "encounter", Description = @"Encounter during which the condition was first asserted", Type = ParamType.Reference, Elements = new string[] { "Condition.encounter", } }, 
                new SearchParam() { Resource = "Condition", Name = "date-asserted", Description = @"When first detected/suspected/entered", Type = ParamType.Date, Elements = new string[] { "Condition.dateAsserted", } }, 
                new SearchParam() { Resource = "Condition", Name = "stage", Description = @"Simple summary (disease specific)", Type = ParamType.Token, Elements = new string[] { "Condition.stage.summary", } }, 
                new SearchParam() { Resource = "Condition", Name = "related-code", Description = @"Relationship target by means of a predefined code", Type = ParamType.Token, Elements = new string[] { "Condition.relatedItem.code", } }, 
                new SearchParam() { Resource = "Condition", Name = "category", Description = @"the category of the condition", Type = ParamType.Token, Elements = new string[] { "Condition.category", } }, 
                new SearchParam() { Resource = "Condition", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Condition", Name = "related-item", Description = @"Relationship target resource", Type = ParamType.Reference, Elements = new string[] { "Condition.relatedItem.target", } }, 
                new SearchParam() { Resource = "Conformance", Name = "software", Description = @"part of a the name of a software application", Type = ParamType.String, Elements = new string[] { "Conformance.software.name", } }, 
                new SearchParam() { Resource = "Conformance", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Conformance", Name = "event", Description = @"event code in a conformance statement", Type = ParamType.Token, Elements = new string[] { "Conformance.messaging.event.code", } }, 
                new SearchParam() { Resource = "Conformance", Name = "resource", Description = @"name of a resource mentioned in a conformance statement", Type = ParamType.Token, Elements = new string[] { "Conformance.rest.resource.type", } }, 
                new SearchParam() { Resource = "Conformance", Name = "security", Description = @"Information about security of implementation", Type = ParamType.Token, Elements = new string[] { "Conformance.rest.security", } }, 
                new SearchParam() { Resource = "Conformance", Name = "format", Description = @"formats supported (xml | json | mime type)", Type = ParamType.Token, Elements = new string[] { "Conformance.format", } }, 
                new SearchParam() { Resource = "Conformance", Name = "date", Description = @"the conformance statement publication date", Type = ParamType.Date, Elements = new string[] { "Conformance.date", } }, 
                new SearchParam() { Resource = "Conformance", Name = "profile", Description = @"a profile id invoked in a conformance statement", Type = ParamType.Reference, Elements = new string[] { "Conformance.rest.resource.profile", } }, 
                new SearchParam() { Resource = "Conformance", Name = "mode", Description = @"mode - restful (server/client) or messaging (sender/receiver)", Type = ParamType.Token, Elements = new string[] { "Conformance.rest.mode", } }, 
                new SearchParam() { Resource = "Conformance", Name = "version", Description = @"the version of FHIR", Type = ParamType.Token, Elements = new string[] { "Conformance.version", } }, 
                new SearchParam() { Resource = "Conformance", Name = "publisher", Description = @"part of a publisher name", Type = ParamType.String, Elements = new string[] { "Conformance.publisher", } }, 
                new SearchParam() { Resource = "Coverage", Name = "plan", Description = @"A plan or policy identifier", Type = ParamType.Token, Elements = new string[] { "Coverage.plan", } }, 
                new SearchParam() { Resource = "Coverage", Name = "issuer", Description = @"The identity of the insurer", Type = ParamType.Reference, Elements = new string[] { "Coverage.issuer", } }, 
                new SearchParam() { Resource = "Coverage", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Coverage", Name = "sequence", Description = @"Sequence number", Type = ParamType.Token, Elements = new string[] { "Coverage.sequence", } }, 
                new SearchParam() { Resource = "Coverage", Name = "name", Description = @"The name of the subscriber", Type = ParamType.Token, Elements = new string[] { "Coverage.subscriber.name", } }, 
                new SearchParam() { Resource = "Coverage", Name = "dependent", Description = @"Dependent number", Type = ParamType.Token, Elements = new string[] { "Coverage.dependent", } }, 
                new SearchParam() { Resource = "Coverage", Name = "group", Description = @"Group identifier", Type = ParamType.Token, Elements = new string[] { "Coverage.group", } }, 
                new SearchParam() { Resource = "Coverage", Name = "type", Description = @"The kind of coverage", Type = ParamType.Token, Elements = new string[] { "Coverage.type", } }, 
                new SearchParam() { Resource = "Coverage", Name = "identifier", Description = @"The primary identifier of the insured", Type = ParamType.Token, Elements = new string[] { "Coverage.identifier", } }, 
                new SearchParam() { Resource = "Coverage", Name = "subplan", Description = @"Sub-plan identifier", Type = ParamType.Token, Elements = new string[] { "Coverage.subplan", } }, 
                new SearchParam() { Resource = "Device", Name = "organization", Description = @"the organization responsible for the device", Type = ParamType.Reference, Elements = new string[] { "Device.owner", } }, 
                new SearchParam() { Resource = "Device", Name = "model", Description = @"the model of the device", Type = ParamType.String, Elements = new string[] { "Device.model", } }, 
                new SearchParam() { Resource = "Device", Name = "patient", Description = @"If the resource is affixed to a person", Type = ParamType.Reference, Elements = new string[] { "Device.patient", } }, 
                new SearchParam() { Resource = "Device", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Device", Name = "location", Description = @"Where the resource is found", Type = ParamType.Reference, Elements = new string[] { "Device.location", } }, 
                new SearchParam() { Resource = "Device", Name = "manufacturer", Description = @"the manufacturer of the device", Type = ParamType.String, Elements = new string[] { "Device.manufacturer", } }, 
                new SearchParam() { Resource = "Device", Name = "assigned-id", Description = @"identifier assigned by the organization", Type = ParamType.Token, Elements = new string[] { "Device.assignedId", } }, 
                new SearchParam() { Resource = "Device", Name = "type", Description = @"the type of the device", Type = ParamType.Token, Elements = new string[] { "Device.type", } }, 
                new SearchParam() { Resource = "Device", Name = "serial", Description = @"the serial number of the device", Type = ParamType.String, Elements = new string[] { "Device.identity.serialNumber", } }, 
                new SearchParam() { Resource = "DeviceCapabilities", Name = "identity", Description = @"Identifies this particular device uniquely", Type = ParamType.Reference, Elements = new string[] { "DeviceCapabilities.identity", } }, 
                new SearchParam() { Resource = "DeviceCapabilities", Name = "facet", Description = @"The facet code", Type = ParamType.Token, Elements = new string[] { "DeviceCapabilities.virtualDevice.channel.metric.facet.code", } }, 
                new SearchParam() { Resource = "DeviceCapabilities", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "DeviceCapabilities", Name = "metric", Description = @"The metric code", Type = ParamType.Token, Elements = new string[] { "DeviceCapabilities.virtualDevice.channel.metric.code", } }, 
                new SearchParam() { Resource = "DeviceCapabilities", Name = "manufacturer", Description = @"Company that built the device", Type = ParamType.Token, Elements = new string[] { "DeviceCapabilities.manufacturer", } }, 
                new SearchParam() { Resource = "DeviceCapabilities", Name = "name", Description = @"The name of this device", Type = ParamType.String, Elements = new string[] { "DeviceCapabilities.name", } }, 
                new SearchParam() { Resource = "DeviceCapabilities", Name = "datatype", Description = @"Quantity | Coding | Array | string", Type = ParamType.Token, Elements = new string[] { "DeviceCapabilities.virtualDevice.channel.metric.info.type", } }, 
                new SearchParam() { Resource = "DeviceCapabilities", Name = "code", Description = @"The compatment code", Type = ParamType.Token, Elements = new string[] { "DeviceCapabilities.virtualDevice.code", } }, 
                new SearchParam() { Resource = "DeviceCapabilities", Name = "type", Description = @"The type of device", Type = ParamType.Token, Elements = new string[] { "DeviceCapabilities.type", } }, 
                new SearchParam() { Resource = "DeviceCapabilities", Name = "channel", Description = @"The channel code", Type = ParamType.Token, Elements = new string[] { "DeviceCapabilities.virtualDevice.channel.code", } }, 
                new SearchParam() { Resource = "DeviceLog", Name = "flag", Description = @"Information about the quality of the data etc", Type = ParamType.Token, Elements = new string[] { "DeviceLog.item.flag", } }, 
                new SearchParam() { Resource = "DeviceLog", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "DeviceLog", Name = "subject", Description = @"Subject of the measurement", Type = ParamType.Reference, Elements = new string[] { "DeviceLog.subject", } }, 
                new SearchParam() { Resource = "DeviceLog", Name = "value", Description = @"The value of the data item, if available", Type = ParamType.Token, Elements = new string[] { "DeviceLog.item.value", } }, 
                new SearchParam() { Resource = "DeviceLog", Name = "capabilities", Description = @"Explicit reference to the capabilities", Type = ParamType.Reference, Elements = new string[] { "DeviceLog.capabilities", } }, 
                new SearchParam() { Resource = "DeviceLog", Name = "instant", Description = @"When the data values are reported", Type = ParamType.Date, Elements = new string[] { "DeviceLog.instant", } }, 
                new SearchParam() { Resource = "DeviceLog", Name = "key", Description = @"Reference to device capabilities declaration", Type = ParamType.Token, Elements = new string[] { "DeviceLog.item.key", } }, 
                new SearchParam() { Resource = "DeviceObservation", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "DeviceObservation", Name = "subject", Description = @"The subject of the measurements", Type = ParamType.Reference, Elements = new string[] { "DeviceObservation.subject", } }, 
                new SearchParam() { Resource = "DeviceObservation", Name = "issued", Description = @"Date the measurements were made", Type = ParamType.Date, Elements = new string[] { "DeviceObservation.issued", } }, 
                new SearchParam() { Resource = "DeviceObservation", Name = "device", Description = @"Device that produced the results", Type = ParamType.Reference, Elements = new string[] { "DeviceObservation.device", } }, 
                new SearchParam() { Resource = "DeviceObservation", Name = "code", Description = @"Type of device observation", Type = ParamType.Token, Elements = new string[] { "DeviceObservation.code", } }, 
                new SearchParam() { Resource = "DeviceObservation", Name = "identifier", Description = @"Identifiers assigned to this observation", Type = ParamType.Token, Elements = new string[] { "DeviceObservation.identifier", } }, 
                new SearchParam() { Resource = "DeviceObservation", Name = "measurement", Description = @"Actual measurements", Type = ParamType.Reference, Elements = new string[] { "DeviceObservation.measurement", } }, 
                new SearchParam() { Resource = "DiagnosticOrder", Name = "orderer", Description = @"Who ordered the test", Type = ParamType.Reference, Elements = new string[] { "DiagnosticOrder.orderer", } }, 
                new SearchParam() { Resource = "DiagnosticOrder", Name = "past-status", Description = @"requested | received | accepted | inprogress | review | complete | suspended | rejected | failed", Type = ParamType.Token, Elements = new string[] { "DiagnosticOrder.event.status", } }, 
                new SearchParam() { Resource = "DiagnosticOrder", Name = "status", Description = @"requested | received | accepted | inprogress | review | complete | suspended | rejected | failed", Type = ParamType.Token, Elements = new string[] { "DiagnosticOrder.status", } }, 
                new SearchParam() { Resource = "DiagnosticOrder", Name = "item-status", Description = @"requested | received | accepted | inprogress | review | complete | suspended | rejected | failed", Type = ParamType.Token, Elements = new string[] { "DiagnosticOrder.item.status", } }, 
                new SearchParam() { Resource = "DiagnosticOrder", Name = "subject", Description = @"Who/what test is about", Type = ParamType.Reference, Elements = new string[] { "DiagnosticOrder.subject", } }, 
                new SearchParam() { Resource = "DiagnosticOrder", Name = "item-past-status", Description = @"requested | received | accepted | inprogress | review | complete | suspended | rejected | failed", Type = ParamType.Token, Elements = new string[] { "DiagnosticOrder.item.event.status", } }, 
                new SearchParam() { Resource = "DiagnosticOrder", Name = "encounter", Description = @"The encounter that this diagnostic order is associated with", Type = ParamType.Reference, Elements = new string[] { "DiagnosticOrder.encounter", } }, 
                new SearchParam() { Resource = "DiagnosticOrder", Name = "actor", Description = @"Who recorded or did this", Type = ParamType.Reference, Elements = new string[] { "DiagnosticOrder.event.actor", "DiagnosticOrder.item.event.actor", } }, 
                new SearchParam() { Resource = "DiagnosticOrder", Name = "code", Description = @"Code for this item", Type = ParamType.Token, Elements = new string[] { "DiagnosticOrder.item.code", } }, 
                new SearchParam() { Resource = "DiagnosticOrder", Name = "date", Description = @"The date at which the event happened", Type = ParamType.Date, Elements = new string[] { "DiagnosticOrder.event.date", } }, 
                new SearchParam() { Resource = "DiagnosticOrder", Name = "status-date", Description = @"A combination of past-status and date", Type = ParamType.Composite, CompositeParams = new string[] { "past-status", "date", } }, 
                new SearchParam() { Resource = "DiagnosticOrder", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "DiagnosticOrder", Name = "bodysite", Description = @"Location of requested test (if applicable)", Type = ParamType.Token, Elements = new string[] { "DiagnosticOrder.item.bodySite", } }, 
                new SearchParam() { Resource = "DiagnosticOrder", Name = "item-date", Description = @"The date at which the event happened", Type = ParamType.Date, Elements = new string[] { "DiagnosticOrder.item.event.date", } }, 
                new SearchParam() { Resource = "DiagnosticOrder", Name = "specimen", Description = @"If the whole order relates to specific specimens", Type = ParamType.Reference, Elements = new string[] { "DiagnosticOrder.specimen", "DiagnosticOrder.item.specimen", } }, 
                new SearchParam() { Resource = "DiagnosticOrder", Name = "item-status-date", Description = @"A combination of item-past-status and item-date", Type = ParamType.Composite, CompositeParams = new string[] { "item-past-status", "item-date", } }, 
                new SearchParam() { Resource = "DiagnosticOrder", Name = "identifier", Description = @"Identifiers assigned to this order", Type = ParamType.Token, Elements = new string[] { "DiagnosticOrder.identifier", } }, 
                new SearchParam() { Resource = "DiagnosticReport", Name = "result", Description = @"link to an atomic result (observation resource)", Type = ParamType.Reference, Elements = new string[] { "DiagnosticReport.results.result", } }, 
                new SearchParam() { Resource = "DiagnosticReport", Name = "requester", Description = @"who made a request that lead to the report", Type = ParamType.Reference, Elements = new string[] { "DiagnosticReport.requestDetail.requester", } }, 
                new SearchParam() { Resource = "DiagnosticReport", Name = "status", Description = @"The status of the report", Type = ParamType.Token, Elements = new string[] { "DiagnosticReport.status", } }, 
                new SearchParam() { Resource = "DiagnosticReport", Name = "test", Description = @"a test requested that the report is in response to", Type = ParamType.Token, Elements = new string[] { "DiagnosticReport.requestDetail.requestTest", } }, 
                new SearchParam() { Resource = "DiagnosticReport", Name = "subject", Description = @"the subject of the report", Type = ParamType.Reference, Elements = new string[] { "DiagnosticReport.subject", } }, 
                new SearchParam() { Resource = "DiagnosticReport", Name = "issued", Description = @"when the report was issued", Type = ParamType.Date, Elements = new string[] { "DiagnosticReport.issued", } }, 
                new SearchParam() { Resource = "DiagnosticReport", Name = "code", Description = @"a coded diagnosis on the report", Type = ParamType.Token, Elements = new string[] { "DiagnosticReport.codedDiagnosis", } }, 
                new SearchParam() { Resource = "DiagnosticReport", Name = "date", Description = @"the clinically relevant time of the report", Type = ParamType.Date, Elements = new string[] { "DiagnosticReport.diagnosticTime", } }, 
                new SearchParam() { Resource = "DiagnosticReport", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "DiagnosticReport", Name = "specimen", Description = @"the specimen details", Type = ParamType.Reference, Elements = new string[] { "DiagnosticReport.results.specimen", } }, 
                new SearchParam() { Resource = "DiagnosticReport", Name = "name", Description = @"the name/code of the report", Type = ParamType.Token, Elements = new string[] { "DiagnosticReport.results.name", } }, 
                new SearchParam() { Resource = "DiagnosticReport", Name = "service", Description = @"which diagnostic discipline/department created the report", Type = ParamType.Token, Elements = new string[] { "DiagnosticReport.serviceCategory", } }, 
                new SearchParam() { Resource = "DiagnosticReport", Name = "performer", Description = @"who was the source of the report (organization)", Type = ParamType.Reference, Elements = new string[] { "DiagnosticReport.performer", } }, 
                new SearchParam() { Resource = "DiagnosticReport", Name = "group", Description = @"name /code of a group in the report", Type = ParamType.Token }, 
                new SearchParam() { Resource = "DiagnosticReport", Name = "identifier", Description = @"an identifier for the report", Type = ParamType.Token, Elements = new string[] { "DiagnosticReport.reportId", } }, 
                new SearchParam() { Resource = "Document", Name = "author", Description = @"author of the document", Type = ParamType.Reference, Elements = new string[] { "Document.author", } }, 
                new SearchParam() { Resource = "Document", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Document", Name = "attester", Description = @"attester of the document", Type = ParamType.Reference, Elements = new string[] { "Document.attester.party", } }, 
                new SearchParam() { Resource = "Document", Name = "subject", Description = @"subject of the document", Type = ParamType.Reference, Elements = new string[] { "Document.subject", } }, 
                new SearchParam() { Resource = "Document", Name = "section-content", Description = @"content resource of the section", Type = ParamType.Reference, Elements = new string[] { "Document.section.content", } }, 
                new SearchParam() { Resource = "Document", Name = "context", Description = @"context of the document", Type = ParamType.Token, Elements = new string[] { "Document.event.code", } }, 
                new SearchParam() { Resource = "Document", Name = "section-type", Description = @"code of the document", Type = ParamType.Token, Elements = new string[] { "Document.section.code", } }, 
                new SearchParam() { Resource = "Document", Name = "date", Description = @"the document creation time", Type = ParamType.Date, Elements = new string[] { "Document.created", } }, 
                new SearchParam() { Resource = "Document", Name = "type", Description = @"the type of the document", Type = ParamType.Token, Elements = new string[] { "Document.type", } }, 
                new SearchParam() { Resource = "Document", Name = "identifier", Description = @"Logical identifier for document (version-independent)", Type = ParamType.Token, Elements = new string[] { "Document.identifier", } }, 
                new SearchParam() { Resource = "Document", Name = "version", Description = @"Version-specific identifier for document", Type = ParamType.Token, Elements = new string[] { "Document.versionIdentifier", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "supersedes", Description = @"If this document replaces another", Type = ParamType.Reference, Elements = new string[] { "DocumentReference.supercedes", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "location", Description = @"Where to access the document", Type = ParamType.String, Elements = new string[] { "DocumentReference.location", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "indexed", Description = @"When this document reference created", Type = ParamType.Date, Elements = new string[] { "DocumentReference.indexed", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "status", Description = @"current | superseded | error", Type = ParamType.Token, Elements = new string[] { "DocumentReference.status", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "subject", Description = @"The subject of the document", Type = ParamType.Reference, Elements = new string[] { "DocumentReference.subject", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "format", Description = @"Format of the document", Type = ParamType.Token, Elements = new string[] { "DocumentReference.format", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "period", Description = @"Time described by the document", Type = ParamType.Date, Elements = new string[] { "DocumentReference.context.period", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "type", Description = @"What kind of document this is (LOINC if possible)", Type = ParamType.Token, Elements = new string[] { "DocumentReference.type", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "authenticator", Description = @"Who authenticated the document", Type = ParamType.Reference, Elements = new string[] { "DocumentReference.authenticator", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "size", Description = @"Size of the document in bytes", Type = ParamType.Integer, Elements = new string[] { "DocumentReference.size", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "author", Description = @"Who/what authored the document", Type = ParamType.Reference, Elements = new string[] { "DocumentReference.author", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "custodian", Description = @"Org which maintains the document", Type = ParamType.Reference, Elements = new string[] { "DocumentReference.custodian", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "facility", Description = @"Kind of facility where patient was seen", Type = ParamType.Token, Elements = new string[] { "DocumentReference.context.facilityType", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "DocumentReference", Name = "created", Description = @"Document creation time", Type = ParamType.Date, Elements = new string[] { "DocumentReference.created", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "event", Description = @"Type of context (i.e. type of event)", Type = ParamType.Token, Elements = new string[] { "DocumentReference.context.code", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "confidentiality", Description = @"Sensitivity of source document", Type = ParamType.Token, Elements = new string[] { "DocumentReference.confidentiality", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "description", Description = @"Human Readable description (title)", Type = ParamType.Text, Elements = new string[] { "DocumentReference.description", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "subtype", Description = @"More detail about the document type", Type = ParamType.Token, Elements = new string[] { "DocumentReference.subtype", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "language", Description = @"Primary language of the document", Type = ParamType.Token, Elements = new string[] { "DocumentReference.primaryLanguage", } }, 
                new SearchParam() { Resource = "DocumentReference", Name = "identifier", Description = @"Other identifiers for the document", Type = ParamType.Token, Elements = new string[] { "DocumentReference.identifier", } }, 
                new SearchParam() { Resource = "Encounter", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Encounter", Name = "start", Description = @"The date and time the encounter starts", Type = ParamType.Date, Elements = new string[] { "Encounter.start", } }, 
                new SearchParam() { Resource = "Encounter", Name = "status", Description = @"E.g. active, aborted, finished", Type = ParamType.Token, Elements = new string[] { "Encounter.status", } }, 
                new SearchParam() { Resource = "Encounter", Name = "fulfills", Description = @"The appointment that scheduled this encounter", Type = ParamType.Reference, Elements = new string[] { "Encounter.fulfills", } }, 
                new SearchParam() { Resource = "Encounter", Name = "subject", Description = @"The patient present at the encounter", Type = ParamType.Reference, Elements = new string[] { "Encounter.subject", } }, 
                new SearchParam() { Resource = "Encounter", Name = "indication", Description = @"Reason the encounter takes place", Type = ParamType.Reference, Elements = new string[] { "Encounter.indication", } }, 
                new SearchParam() { Resource = "Encounter", Name = "length", Description = @"Length of encounter in days", Type = ParamType.Integer, Elements = new string[] { "Encounter.length", } }, 
                new SearchParam() { Resource = "Encounter", Name = "identifier", Description = @"Identifier(s) by which this encounter is known", Type = ParamType.Token, Elements = new string[] { "Encounter.identifier", } }, 
                new SearchParam() { Resource = "FamilyHistory", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "FamilyHistory", Name = "subject", Description = @"The identity of a subject to list family history items for", Type = ParamType.Reference, Elements = new string[] { "FamilyHistory.subject", } }, 
                new SearchParam() { Resource = "Group", Name = "member", Description = @"Who is in group", Type = ParamType.Reference, Elements = new string[] { "Group.member", } }, 
                new SearchParam() { Resource = "Group", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Group", Name = "group-type", Description = @"The type of resources the group contains", Type = ParamType.Token, Elements = new string[] { "Group.type", } }, 
                new SearchParam() { Resource = "Group", Name = "type-value", Description = @"A composite of both type and value", Type = ParamType.Composite, CompositeParams = new string[] { "type", "value", } }, 
                new SearchParam() { Resource = "Group", Name = "value", Description = @"Value held by characteristic", Type = ParamType.Token, Elements = new string[] { "Group.characteristic.value[x]", } }, 
                new SearchParam() { Resource = "Group", Name = "actual", Description = @"Descriptive or actual", Type = ParamType.Token, Elements = new string[] { "Group.actual", } }, 
                new SearchParam() { Resource = "Group", Name = "exclude", Description = @"Group includes or excludes", Type = ParamType.Token, Elements = new string[] { "Group.characteristic.exclude", } }, 
                new SearchParam() { Resource = "Group", Name = "code", Description = @"The kind of resources contained", Type = ParamType.Token, Elements = new string[] { "Group.code", } }, 
                new SearchParam() { Resource = "Group", Name = "type", Description = @"Kind of characteristic", Type = ParamType.Token, Elements = new string[] { "Group.characteristic.type", } }, 
                new SearchParam() { Resource = "Group", Name = "identifier", Description = @"Unique id", Type = ParamType.Token, Elements = new string[] { "Group.identifier", } }, 
                new SearchParam() { Resource = "ImagingStudy", Name = "uid", Description = @"Formal identifier for this instance (0008,0018)", Type = ParamType.Token, Elements = new string[] { "ImagingStudy.series.instance.uid", } }, 
                new SearchParam() { Resource = "ImagingStudy", Name = "series", Description = @"the series id for the image", Type = ParamType.Token, Elements = new string[] { "ImagingStudy.series.uid", } }, 
                new SearchParam() { Resource = "ImagingStudy", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "ImagingStudy", Name = "bodysite", Description = @"Body part examined (Map from 0018,0015)", Type = ParamType.Token, Elements = new string[] { "ImagingStudy.series.bodySite", } }, 
                new SearchParam() { Resource = "ImagingStudy", Name = "subject", Description = @"Who the study is about", Type = ParamType.Reference, Elements = new string[] { "ImagingStudy.subject", } }, 
                new SearchParam() { Resource = "ImagingStudy", Name = "accession", Description = @"the accession id for the image", Type = ParamType.Token, Elements = new string[] { "ImagingStudy.accessionNo", } }, 
                new SearchParam() { Resource = "ImagingStudy", Name = "study", Description = @"the study id for the image", Type = ParamType.Token, Elements = new string[] { "ImagingStudy.uid", } }, 
                new SearchParam() { Resource = "ImagingStudy", Name = "modality", Description = @"the modality of the image", Type = ParamType.Token, Elements = new string[] { "ImagingStudy.series.modality", } }, 
                new SearchParam() { Resource = "ImagingStudy", Name = "date", Description = @"the date the study was done was taken", Type = ParamType.Date, Elements = new string[] { "ImagingStudy.dateTime", } }, 
                new SearchParam() { Resource = "ImagingStudy", Name = "dicom-class", Description = @"DICOM class type (0008,0016)", Type = ParamType.Token, Elements = new string[] { "ImagingStudy.series.instance.sopclass", } }, 
                new SearchParam() { Resource = "ImagingStudy", Name = "size", Description = @"the size of the image in MB - may include > or < in the value", Type = ParamType.Integer }, 
                new SearchParam() { Resource = "Immunization", Name = "requester", Description = @"The practitioner who ordered the vaccination", Type = ParamType.Reference, Elements = new string[] { "Immunization.requester", } }, 
                new SearchParam() { Resource = "Immunization", Name = "lot-number", Description = @"Vaccine Lot Number", Type = ParamType.String, Elements = new string[] { "Immunization.lotNumber", } }, 
                new SearchParam() { Resource = "Immunization", Name = "vaccine-type", Description = @"Vaccine Product Type Administered", Type = ParamType.Token, Elements = new string[] { "Immunization.vaccineType", } }, 
                new SearchParam() { Resource = "Immunization", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Immunization", Name = "location", Description = @"The service delivery location or facility in which the vaccine was / was to be administered", Type = ParamType.Reference, Elements = new string[] { "Immunization.location", } }, 
                new SearchParam() { Resource = "Immunization", Name = "subject", Description = @"The subject of the vaccination event / refusal", Type = ParamType.Reference, Elements = new string[] { "Immunization.subject", } }, 
                new SearchParam() { Resource = "Immunization", Name = "manufacturer", Description = @"Vaccine Manufacturer", Type = ParamType.Reference, Elements = new string[] { "Immunization.manufacturer", } }, 
                new SearchParam() { Resource = "Immunization", Name = "performer", Description = @"The practitioner who administered the vaccination", Type = ParamType.Reference, Elements = new string[] { "Immunization.performer", } }, 
                new SearchParam() { Resource = "Immunization", Name = "refusal-reason", Description = @"Explanation of refusal / exemption", Type = ParamType.Token, Elements = new string[] { "Immunization.explanation.refusalReason", } }, 
                new SearchParam() { Resource = "Immunization", Name = "date", Description = @"Vaccination  Administration / Refusal Date", Type = ParamType.Date, Elements = new string[] { "Immunization.date", } }, 
                new SearchParam() { Resource = "ImmunizationProfile", Name = "vaccine-type", Description = @"Vaccine that pertains to the recommendation", Type = ParamType.Token, Elements = new string[] { "ImmunizationProfile.recommendation.vaccineType", } }, 
                new SearchParam() { Resource = "ImmunizationProfile", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "ImmunizationProfile", Name = "subject", Description = @"Who this profile is for", Type = ParamType.Reference, Elements = new string[] { "ImmunizationProfile.subject", } }, 
                new SearchParam() { Resource = "List", Name = "source", Description = @"Source of the list", Type = ParamType.Reference, Elements = new string[] { "List.source", } }, 
                new SearchParam() { Resource = "List", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "List", Name = "item", Description = @"Actual entry", Type = ParamType.Reference, Elements = new string[] { "List.entry.item", } }, 
                new SearchParam() { Resource = "List", Name = "code", Description = @"What the purpose of this list is", Type = ParamType.Token, Elements = new string[] { "List.code", } }, 
                new SearchParam() { Resource = "List", Name = "date", Description = @"When the list was prepared", Type = ParamType.Date, Elements = new string[] { "List.date", } }, 
                new SearchParam() { Resource = "List", Name = "empty-reason", Description = @"Why list is empty", Type = ParamType.Token, Elements = new string[] { "List.emptyReason", } }, 
                new SearchParam() { Resource = "Location", Name = "near", Description = @"The coordinates expressed as [lat],[long] (using KML, see notes) to find locations near to (servers may search using a square rather than a circle for efficiency)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Location", Name = "partof", Description = @"The location of which this location is a part", Type = ParamType.Reference, Elements = new string[] { "Location.partOf", } }, 
                new SearchParam() { Resource = "Location", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Location", Name = "address", Description = @"A (part of the) address of the location", Type = ParamType.String, Elements = new string[] { "Location.address", } }, 
                new SearchParam() { Resource = "Location", Name = "name", Description = @"A (portion of the) name of the location", Type = ParamType.String, Elements = new string[] { "Location.name", } }, 
                new SearchParam() { Resource = "Location", Name = "active", Description = @"Whether to search for active or inactive locations", Type = ParamType.Token, Elements = new string[] { "Location.active", } }, 
                new SearchParam() { Resource = "Location", Name = "near-distance", Description = @"A distance quantity to limit the near search to locations within a specific distance", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Location", Name = "type", Description = @"A code for the type of location", Type = ParamType.Token, Elements = new string[] { "Location.type", } }, 
                new SearchParam() { Resource = "Media", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Media", Name = "subject", Description = @"Who/What this Media is a record of", Type = ParamType.Reference, Elements = new string[] { "Media.subject", } }, 
                new SearchParam() { Resource = "Media", Name = "subtype", Description = @"The type of acquisition equipment/process", Type = ParamType.Token, Elements = new string[] { "Media.subtype", } }, 
                new SearchParam() { Resource = "Media", Name = "view", Description = @"Imaging view e.g Lateral or Antero-posterior", Type = ParamType.Token, Elements = new string[] { "Media.view", } }, 
                new SearchParam() { Resource = "Media", Name = "date", Description = @"When the media was taken/recorded", Type = ParamType.Date, Elements = new string[] { "Media.dateTime", } }, 
                new SearchParam() { Resource = "Media", Name = "type", Description = @"photo | audio | video", Type = ParamType.Token, Elements = new string[] { "Media.type", } }, 
                new SearchParam() { Resource = "Media", Name = "identifier", Description = @"Identifier(s) for the image", Type = ParamType.Token, Elements = new string[] { "Media.identifier", } }, 
                new SearchParam() { Resource = "Media", Name = "operator", Description = @"The person who generated the image", Type = ParamType.Reference, Elements = new string[] { "Media.operator", } }, 
                new SearchParam() { Resource = "Medication", Name = "content", Description = @"A product in the package", Type = ParamType.Reference, Elements = new string[] { "Medication.package.content.item", } }, 
                new SearchParam() { Resource = "Medication", Name = "form", Description = @"Powder | tablets | carton etc", Type = ParamType.Token, Elements = new string[] { "Medication.product.form", } }, 
                new SearchParam() { Resource = "Medication", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Medication", Name = "container", Description = @"Kind of container", Type = ParamType.Token, Elements = new string[] { "Medication.package.container", } }, 
                new SearchParam() { Resource = "Medication", Name = "manufacturer", Description = @"Manufacturer of the item", Type = ParamType.Reference, Elements = new string[] { "Medication.manufacturer", } }, 
                new SearchParam() { Resource = "Medication", Name = "name", Description = @"Common / Commercial name", Type = ParamType.String, Elements = new string[] { "Medication.name", } }, 
                new SearchParam() { Resource = "Medication", Name = "ingredient", Description = @"Ingredient", Type = ParamType.Reference, Elements = new string[] { "Medication.product.ingredient.item", } }, 
                new SearchParam() { Resource = "Medication", Name = "code", Description = @"References to std. medication terminologies", Type = ParamType.Token, Elements = new string[] { "Medication.code", } }, 
                new SearchParam() { Resource = "MedicationAdministration", Name = "medication", Description = @"Return administrations of this medication", Type = ParamType.Reference, Elements = new string[] { "MedicationAdministration.medication", } }, 
                new SearchParam() { Resource = "MedicationAdministration", Name = "patient", Description = @"The identity of a patient to list administrations  for", Type = ParamType.Reference, Elements = new string[] { "MedicationAdministration.patient", } }, 
                new SearchParam() { Resource = "MedicationAdministration", Name = "administrationdevice", Description = @"Return administrations with this administration device identity", Type = ParamType.Reference, Elements = new string[] { "MedicationAdministration.administrationDevice", } }, 
                new SearchParam() { Resource = "MedicationAdministration", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "MedicationAdministration", Name = "status", Description = @"MedicationAdministration event status (for example one of active/paused/completed/nullified)", Type = ParamType.Token, Elements = new string[] { "MedicationAdministration.status", } }, 
                new SearchParam() { Resource = "MedicationAdministration", Name = "prescription", Description = @"The identity of a prescription to list administrations from", Type = ParamType.Reference, Elements = new string[] { "MedicationAdministration.prescription", } }, 
                new SearchParam() { Resource = "MedicationAdministration", Name = "notgiven", Description = @"Administrations that were not made", Type = ParamType.Token, Elements = new string[] { "MedicationAdministration.wasNotGiven", } }, 
                new SearchParam() { Resource = "MedicationAdministration", Name = "whengiven", Description = @"Date of administration", Type = ParamType.Date, Elements = new string[] { "MedicationAdministration.whenGiven", } }, 
                new SearchParam() { Resource = "MedicationAdministration", Name = "encounter", Description = @"Return administrations that share this encounter", Type = ParamType.Reference, Elements = new string[] { "MedicationAdministration.encounter", } }, 
                new SearchParam() { Resource = "MedicationAdministration", Name = "identifier", Description = @"Return administrations with this external identity", Type = ParamType.Token, Elements = new string[] { "MedicationAdministration.identifier", } }, 
                new SearchParam() { Resource = "MedicationDispense", Name = "medication", Description = @"Returns dispenses of this medicine", Type = ParamType.Reference, Elements = new string[] { "MedicationDispense.dispense.medication", } }, 
                new SearchParam() { Resource = "MedicationDispense", Name = "patient", Description = @"The identity of a patient to list dispenses  for", Type = ParamType.Reference, Elements = new string[] { "MedicationDispense.patient", } }, 
                new SearchParam() { Resource = "MedicationDispense", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "MedicationDispense", Name = "status", Description = @"Status of the dispense", Type = ParamType.Token, Elements = new string[] { "MedicationDispense.dispense.status", } }, 
                new SearchParam() { Resource = "MedicationDispense", Name = "prescription", Description = @"The identity of a prescription to list dispenses from", Type = ParamType.Reference, Elements = new string[] { "MedicationDispense.authorizingPrescription", } }, 
                new SearchParam() { Resource = "MedicationDispense", Name = "responsibleparty", Description = @"Return all dispenses with the specified responsibel party", Type = ParamType.Reference, Elements = new string[] { "MedicationDispense.substitution.responsibleParty", } }, 
                new SearchParam() { Resource = "MedicationDispense", Name = "dispenser", Description = @"Return all dispenses performed by a specific indiividual", Type = ParamType.Reference, Elements = new string[] { "MedicationDispense.dispenser", } }, 
                new SearchParam() { Resource = "MedicationDispense", Name = "type", Description = @"Return all dispenses of a specific type", Type = ParamType.Token, Elements = new string[] { "MedicationDispense.dispense.type", } }, 
                new SearchParam() { Resource = "MedicationDispense", Name = "identifier", Description = @"Return dispenses with this external identity", Type = ParamType.Token, Elements = new string[] { "MedicationDispense.identifier", } }, 
                new SearchParam() { Resource = "MedicationDispense", Name = "whenprepared", Description = @"Date when medication prepared", Type = ParamType.Date, Elements = new string[] { "MedicationDispense.dispense.whenPrepared", } }, 
                new SearchParam() { Resource = "MedicationDispense", Name = "whenhandedover", Description = @"Date when medication handed over to patient (outpatient setting), or supplied to ward or clinic (inpatient setting)", Type = ParamType.Date, Elements = new string[] { "MedicationDispense.dispense.whenHandedOver", } }, 
                new SearchParam() { Resource = "MedicationDispense", Name = "destination", Description = @"Return dispenses that should be sent to a secific destination", Type = ParamType.Reference, Elements = new string[] { "MedicationDispense.dispense.destination", } }, 
                new SearchParam() { Resource = "MedicationPrescription", Name = "medication", Description = @"Code for medicine or text in medicine name", Type = ParamType.Reference, Elements = new string[] { "MedicationPrescription.medication", } }, 
                new SearchParam() { Resource = "MedicationPrescription", Name = "datewritten", Description = @"Return prescriptions written on this date", Type = ParamType.Date, Elements = new string[] { "MedicationPrescription.dateWritten", } }, 
                new SearchParam() { Resource = "MedicationPrescription", Name = "patient", Description = @"The identity of a patient to list dispenses  for", Type = ParamType.Reference, Elements = new string[] { "MedicationPrescription.patient", } }, 
                new SearchParam() { Resource = "MedicationPrescription", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "MedicationPrescription", Name = "status", Description = @"Status of the prescription", Type = ParamType.Token, Elements = new string[] { "MedicationPrescription.status", } }, 
                new SearchParam() { Resource = "MedicationPrescription", Name = "encounter", Description = @"Return prescriptions with this encounter identity", Type = ParamType.Reference, Elements = new string[] { "MedicationPrescription.encounter", } }, 
                new SearchParam() { Resource = "MedicationPrescription", Name = "identifier", Description = @"Return prescriptions with this external identity", Type = ParamType.Token, Elements = new string[] { "MedicationPrescription.identifier", } }, 
                new SearchParam() { Resource = "MedicationStatement", Name = "medication", Description = @"Code for medicine or text in medicine name", Type = ParamType.Reference, Elements = new string[] { "MedicationStatement.medication", } }, 
                new SearchParam() { Resource = "MedicationStatement", Name = "patient", Description = @"The identity of a patient to list administrations  for", Type = ParamType.Reference, Elements = new string[] { "MedicationStatement.patient", } }, 
                new SearchParam() { Resource = "MedicationStatement", Name = "administrationdevice", Description = @"Return administrations with this administration device identity", Type = ParamType.Reference, Elements = new string[] { "MedicationStatement.administrationDevice", } }, 
                new SearchParam() { Resource = "MedicationStatement", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "MedicationStatement", Name = "when-given", Description = @"Date of administration", Type = ParamType.Date, Elements = new string[] { "MedicationStatement.whenGiven", } }, 
                new SearchParam() { Resource = "MedicationStatement", Name = "identifier", Description = @"Return administrations with this external identity", Type = ParamType.Token, Elements = new string[] { "MedicationStatement.identifier", } }, 
                new SearchParam() { Resource = "Message", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Observation", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Observation", Name = "status", Description = @"The status of the observation", Type = ParamType.Token, Elements = new string[] { "Observation.status", } }, 
                new SearchParam() { Resource = "Observation", Name = "subject", Description = @"The subject that the observation is about", Type = ParamType.Reference, Elements = new string[] { "Observation.subject", } }, 
                new SearchParam() { Resource = "Observation", Name = "name", Description = @"The name of the observation type or component type", Type = ParamType.Token, Elements = new string[] { "Observation.name", } }, 
                new SearchParam() { Resource = "Observation", Name = "reliability", Description = @"The reliability of the observation", Type = ParamType.Token, Elements = new string[] { "Observation.reliability", } }, 
                new SearchParam() { Resource = "Observation", Name = "value", Description = @"The code or value of a result", Type = ParamType.Token, Elements = new string[] { "Observation.value[x]", } }, 
                new SearchParam() { Resource = "Observation", Name = "performer", Description = @"who/what performed the observation", Type = ParamType.Reference, Elements = new string[] { "Observation.performer", } }, 
                new SearchParam() { Resource = "Observation", Name = "name-value", Description = @"Both name and value", Type = ParamType.Composite, CompositeParams = new string[] { "name", "value", } }, 
                new SearchParam() { Resource = "Observation", Name = "date", Description = @"obtained date/time. If the obtained element is a period, a date that falls in the period", Type = ParamType.Date, Elements = new string[] { "Observation.applies[x]", } }, 
                new SearchParam() { Resource = "OperationOutcome", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Order", Name = "authority", Description = @"If required by policy", Type = ParamType.Reference, Elements = new string[] { "Order.authority", } }, 
                new SearchParam() { Resource = "Order", Name = "detail", Description = @"What action is being ordered", Type = ParamType.Reference, Elements = new string[] { "Order.detail", } }, 
                new SearchParam() { Resource = "Order", Name = "source", Description = @"Who initiated the order", Type = ParamType.Reference, Elements = new string[] { "Order.source", } }, 
                new SearchParam() { Resource = "Order", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Order", Name = "subject", Description = @"Patient this order is about", Type = ParamType.Reference, Elements = new string[] { "Order.subject", } }, 
                new SearchParam() { Resource = "Order", Name = "when", Description = @"A formal schedule", Type = ParamType.Date, Elements = new string[] { "Order.when.schedule", } }, 
                new SearchParam() { Resource = "Order", Name = "target", Description = @"Who is intended to fulfill the order", Type = ParamType.Reference, Elements = new string[] { "Order.target", } }, 
                new SearchParam() { Resource = "Order", Name = "when_code", Description = @"Code specifies when request should be done. The code may simply be a priority code", Type = ParamType.Token, Elements = new string[] { "Order.when.code", } }, 
                new SearchParam() { Resource = "Order", Name = "date", Description = @"When the order was made", Type = ParamType.Date, Elements = new string[] { "Order.date", } }, 
                new SearchParam() { Resource = "OrderResponse", Name = "authority", Description = @"If required by policy", Type = ParamType.Reference, Elements = new string[] { "OrderResponse.authority", } }, 
                new SearchParam() { Resource = "OrderResponse", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "OrderResponse", Name = "fulfillment", Description = @"Details of the outcome of performing the order", Type = ParamType.Reference, Elements = new string[] { "OrderResponse.fulfillment", } }, 
                new SearchParam() { Resource = "OrderResponse", Name = "request", Description = @"The order that this is a response to", Type = ParamType.Reference, Elements = new string[] { "OrderResponse.request", } }, 
                new SearchParam() { Resource = "OrderResponse", Name = "code", Description = @"The status of the response", Type = ParamType.Token, Elements = new string[] { "OrderResponse.code", } }, 
                new SearchParam() { Resource = "OrderResponse", Name = "date", Description = @"When the response was made", Type = ParamType.Date, Elements = new string[] { "OrderResponse.date", } }, 
                new SearchParam() { Resource = "OrderResponse", Name = "cost", Description = @"How much the request will/did cost", Type = ParamType.Integer, Elements = new string[] { "OrderResponse.cost", } }, 
                new SearchParam() { Resource = "OrderResponse", Name = "who", Description = @"Who made the response", Type = ParamType.Reference, Elements = new string[] { "OrderResponse.who", } }, 
                new SearchParam() { Resource = "Organization", Name = "phonetic", Description = @"A portion of the organization's name using some kind of phonetic matching algorithm", Type = ParamType.String }, 
                new SearchParam() { Resource = "Organization", Name = "partof", Description = @"Search all organizations that are part of the given organization", Type = ParamType.Reference, Elements = new string[] { "Organization.partOf", } }, 
                new SearchParam() { Resource = "Organization", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Organization", Name = "name", Description = @"A portion of the organization's name", Type = ParamType.String, Elements = new string[] { "Organization.name", } }, 
                new SearchParam() { Resource = "Organization", Name = "active", Description = @"Whether the organization's record is active", Type = ParamType.Token, Elements = new string[] { "Organization.active", } }, 
                new SearchParam() { Resource = "Organization", Name = "type", Description = @"A code for the type of organization", Type = ParamType.Token, Elements = new string[] { "Organization.type", } }, 
                new SearchParam() { Resource = "Organization", Name = "identifier", Description = @"Any identifier for the organization (not the accreditation issuer's identifier)", Type = ParamType.Token, Elements = new string[] { "Organization.identifier", } }, 
                new SearchParam() { Resource = "Other", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Other", Name = "created", Description = @"When created", Type = ParamType.Date, Elements = new string[] { "Other.created", } }, 
                new SearchParam() { Resource = "Other", Name = "subject", Description = @"Identifies the", Type = ParamType.Reference, Elements = new string[] { "Other.subject", } }, 
                new SearchParam() { Resource = "Patient", Name = "animal-breed", Description = @"the breed for animal patients", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Patient", Name = "phonetic", Description = @"a portion of either family or given name using some kind of phonetic matching algorithm", Type = ParamType.String }, 
                new SearchParam() { Resource = "Patient", Name = "provider", Description = @"The identity of the organization at which this person is a patient", Type = ParamType.Reference, Elements = new string[] { "Patient.provider", } }, 
                new SearchParam() { Resource = "Patient", Name = "animal-species", Description = @"the species for animal patients", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Patient", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Patient", Name = "given", Description = @"a portion of the given name of the patient", Type = ParamType.String }, 
                new SearchParam() { Resource = "Patient", Name = "address", Description = @"an address in any kind of address/part of the patient", Type = ParamType.String }, 
                new SearchParam() { Resource = "Patient", Name = "family", Description = @"a portion of the family name of the patient", Type = ParamType.String }, 
                new SearchParam() { Resource = "Patient", Name = "name", Description = @"a portion of either family or given name of the patient", Type = ParamType.String }, 
                new SearchParam() { Resource = "Patient", Name = "telecom", Description = @"the value in any kind of telecom details of the patient", Type = ParamType.String }, 
                new SearchParam() { Resource = "Patient", Name = "birthdate", Description = @"the patient's date of birth", Type = ParamType.Date }, 
                new SearchParam() { Resource = "Patient", Name = "gender", Description = @"gender of the patient", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Patient", Name = "active", Description = @"Whether the patient record is active", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Patient", Name = "language", Description = @"language code (irrespective of use value)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Patient", Name = "identifier", Description = @"A patient identifier", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Practitioner", Name = "organization", Description = @"The identity of the organization the practitioner represents / acts on behalf of", Type = ParamType.Reference, Elements = new string[] { "Practitioner.organization", } }, 
                new SearchParam() { Resource = "Practitioner", Name = "phonetic", Description = @"a portion of either family or given name using some kind of phonetic matching algorithm", Type = ParamType.String, Elements = new string[] { "Practitioner.name", } }, 
                new SearchParam() { Resource = "Practitioner", Name = "given", Description = @"a portion of the given name", Type = ParamType.String, Elements = new string[] { "Practitioner.name", } }, 
                new SearchParam() { Resource = "Practitioner", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Practitioner", Name = "address", Description = @"an address in any kind of address/part", Type = ParamType.String, Elements = new string[] { "Practitioner.address", } }, 
                new SearchParam() { Resource = "Practitioner", Name = "family", Description = @"a portion of the family name", Type = ParamType.String, Elements = new string[] { "Practitioner.name", } }, 
                new SearchParam() { Resource = "Practitioner", Name = "name", Description = @"a portion of either family or given name", Type = ParamType.String, Elements = new string[] { "Practitioner.name", } }, 
                new SearchParam() { Resource = "Practitioner", Name = "telecom", Description = @"the value in any kind of contact", Type = ParamType.String, Elements = new string[] { "Practitioner.telecom", } }, 
                new SearchParam() { Resource = "Practitioner", Name = "gender", Description = @"gender of the practitioner", Type = ParamType.Token, Elements = new string[] { "Practitioner.gender", } }, 
                new SearchParam() { Resource = "Practitioner", Name = "identifier", Description = @"A practitioner's Identifier", Type = ParamType.Token, Elements = new string[] { "Practitioner.identifier", } }, 
                new SearchParam() { Resource = "Procedure", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Procedure", Name = "subject", Description = @"The identity of a patient to list procedures  for", Type = ParamType.Reference, Elements = new string[] { "Procedure.subject", } }, 
                new SearchParam() { Resource = "Procedure", Name = "date", Description = @"the date the procedure was performed on", Type = ParamType.Date, Elements = new string[] { "Procedure.date", } }, 
                new SearchParam() { Resource = "Procedure", Name = "type", Description = @"type of procedure", Type = ParamType.Token, Elements = new string[] { "Procedure.type", } }, 
                new SearchParam() { Resource = "Profile", Name = "extension", Description = @"An extension code (use or definition)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Profile", Name = "author", Description = @"Name or id of the author of the profile", Type = ParamType.String }, 
                new SearchParam() { Resource = "Profile", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Profile", Name = "status", Description = @"The current status of the profile", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Profile", Name = "name", Description = @"A portion of the name of the profile", Type = ParamType.String }, 
                new SearchParam() { Resource = "Profile", Name = "resource", Description = @"A resource constrained in a profile", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Profile", Name = "binding", Description = @"A vocabulary binding code", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Profile", Name = "word", Description = @"A word somewhere in the definition of the profile or the elements in the resource. (Common words  - 'and', etc. - are often not supported)", Type = ParamType.Text }, 
                new SearchParam() { Resource = "Profile", Name = "code", Description = @"A code for the profile in the format uri::code (server may choose to do subsumption)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Profile", Name = "date", Description = @"The profile publication date", Type = ParamType.Date }, 
                new SearchParam() { Resource = "Profile", Name = "type", Description = @"Type of resource that is constrained in the profile", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Profile", Name = "reference", Description = @"An id of another profile referenced in the profile", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Provenance", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Provenance", Name = "location", Description = @"Where the activity occurred, if relevant", Type = ParamType.Reference, Elements = new string[] { "Provenance.location", } }, 
                new SearchParam() { Resource = "Provenance", Name = "start", Description = @"The start of the period", Type = ParamType.Date, Elements = new string[] { "Provenance.period.start", } }, 
                new SearchParam() { Resource = "Provenance", Name = "partytype", Description = @"Resource | Person | Application | Record | Document +", Type = ParamType.Token, Elements = new string[] { "Provenance.agent.type", } }, 
                new SearchParam() { Resource = "Provenance", Name = "target", Description = @"Target resource(s) (usually version specific)", Type = ParamType.Reference, Elements = new string[] { "Provenance.target", } }, 
                new SearchParam() { Resource = "Provenance", Name = "party", Description = @"Identity of agent (urn or url)", Type = ParamType.Token, Elements = new string[] { "Provenance.agent.reference", } }, 
                new SearchParam() { Resource = "Provenance", Name = "end", Description = @"The end of the period, if not ongoing", Type = ParamType.Date, Elements = new string[] { "Provenance.period.end", } }, 
                new SearchParam() { Resource = "Query", Name = "response", Description = @"Links response to source query", Type = ParamType.Token, Elements = new string[] { "Query.response.identifier", } }, 
                new SearchParam() { Resource = "Query", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Query", Name = "identifier", Description = @"Links query and its response(s)", Type = ParamType.Token, Elements = new string[] { "Query.identifier", } }, 
                new SearchParam() { Resource = "Questionnaire", Name = "author", Description = @"the author of the questionnaire", Type = ParamType.Reference, Elements = new string[] { "Questionnaire.author", } }, 
                new SearchParam() { Resource = "Questionnaire", Name = "authored", Description = @"when the questionnaire was authored", Type = ParamType.Date, Elements = new string[] { "Questionnaire.authored", } }, 
                new SearchParam() { Resource = "Questionnaire", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Questionnaire", Name = "status", Description = @"The status of the questionnaire", Type = ParamType.Token, Elements = new string[] { "Questionnaire.status", } }, 
                new SearchParam() { Resource = "Questionnaire", Name = "subject", Description = @"the subject of the questionnaire", Type = ParamType.Reference, Elements = new string[] { "Questionnaire.subject", } }, 
                new SearchParam() { Resource = "Questionnaire", Name = "name", Description = @"name of the questionnaire", Type = ParamType.Token, Elements = new string[] { "Questionnaire.name", } }, 
                new SearchParam() { Resource = "Questionnaire", Name = "encounter", Description = @"encounter during which questionnaire was authored", Type = ParamType.Reference, Elements = new string[] { "Questionnaire.encounter", } }, 
                new SearchParam() { Resource = "Questionnaire", Name = "identifier", Description = @"an identifier for the questionnaire", Type = ParamType.Token, Elements = new string[] { "Questionnaire.identifier", } }, 
                new SearchParam() { Resource = "RelatedPerson", Name = "patient", Description = @"The patient this person is related to", Type = ParamType.Reference, Elements = new string[] { "RelatedPerson.patient", } }, 
                new SearchParam() { Resource = "RelatedPerson", Name = "phonetic", Description = @"a portion of name using some kind of phonetic matching algorithm", Type = ParamType.String }, 
                new SearchParam() { Resource = "RelatedPerson", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "RelatedPerson", Name = "address", Description = @"an address in any kind of address/part", Type = ParamType.String, Elements = new string[] { "RelatedPerson.address", } }, 
                new SearchParam() { Resource = "RelatedPerson", Name = "name", Description = @"a portion of name in any name part", Type = ParamType.String, Elements = new string[] { "RelatedPerson.name", } }, 
                new SearchParam() { Resource = "RelatedPerson", Name = "telecom", Description = @"the value in any kind of contact", Type = ParamType.String, Elements = new string[] { "RelatedPerson.telecom", } }, 
                new SearchParam() { Resource = "RelatedPerson", Name = "gender", Description = @"gender of the person", Type = ParamType.Token, Elements = new string[] { "RelatedPerson.gender", } }, 
                new SearchParam() { Resource = "RelatedPerson", Name = "identifier", Description = @"A patient Identifier", Type = ParamType.Token, Elements = new string[] { "RelatedPerson.identifier", } }, 
                new SearchParam() { Resource = "SecurityEvent", Name = "site", Description = @"Logical source location within the enterprise", Type = ParamType.Token, Elements = new string[] { "SecurityEvent.source.site", } }, 
                new SearchParam() { Resource = "SecurityEvent", Name = "desc", Description = @"Instance-specific descriptor for Object", Type = ParamType.String, Elements = new string[] { "SecurityEvent.object.name", } }, 
                new SearchParam() { Resource = "SecurityEvent", Name = "type", Description = @"Type of event", Type = ParamType.Token, Elements = new string[] { "SecurityEvent.event.type", } }, 
                new SearchParam() { Resource = "SecurityEvent", Name = "date", Description = @"Time when the event occurred on source", Type = ParamType.Date, Elements = new string[] { "SecurityEvent.event.dateTime", } }, 
                new SearchParam() { Resource = "SecurityEvent", Name = "reference", Description = @"Specific instance of resource (e.g. versioned)", Type = ParamType.Reference, Elements = new string[] { "SecurityEvent.object.reference", } }, 
                new SearchParam() { Resource = "SecurityEvent", Name = "authid", Description = @"User id used by authentication system", Type = ParamType.Token, Elements = new string[] { "SecurityEvent.participant.authId", } }, 
                new SearchParam() { Resource = "SecurityEvent", Name = "identity", Description = @"Specific instance of object (e.g. versioned)", Type = ParamType.Token, Elements = new string[] { "SecurityEvent.object.identifier", } }, 
                new SearchParam() { Resource = "SecurityEvent", Name = "patientid", Description = @"The id of the patient (one of multiple kinds of participations)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "SecurityEvent", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "SecurityEvent", Name = "source", Description = @"The id of source where event originated", Type = ParamType.Token, Elements = new string[] { "SecurityEvent.source.identifier", } }, 
                new SearchParam() { Resource = "SecurityEvent", Name = "address", Description = @"Identifier for the network access point of the user device", Type = ParamType.Token, Elements = new string[] { "SecurityEvent.participant.network.identifier", } }, 
                new SearchParam() { Resource = "SecurityEvent", Name = "subtype", Description = @"Sub-type of event", Type = ParamType.Token, Elements = new string[] { "SecurityEvent.event.subtype", } }, 
                new SearchParam() { Resource = "SecurityEvent", Name = "name", Description = @"Human-meaningful name for the user", Type = ParamType.String, Elements = new string[] { "SecurityEvent.participant.name", } }, 
                new SearchParam() { Resource = "SecurityEvent", Name = "action", Description = @"Type of action performed during the event", Type = ParamType.Token, Elements = new string[] { "SecurityEvent.event.action", } }, 
                new SearchParam() { Resource = "SecurityEvent", Name = "object-type", Description = @"Object type being audited", Type = ParamType.Token, Elements = new string[] { "SecurityEvent.object.type", } }, 
                new SearchParam() { Resource = "SecurityEvent", Name = "user", Description = @"Unique identifier for the user", Type = ParamType.Token, Elements = new string[] { "SecurityEvent.participant.userId", } }, 
                new SearchParam() { Resource = "Specimen", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Specimen", Name = "subject", Description = @"the subject of the specimen", Type = ParamType.Reference, Elements = new string[] { "Specimen.subject", } }, 
                new SearchParam() { Resource = "Substance", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Substance", Name = "name", Description = @"The name of the substance", Type = ParamType.Token, Elements = new string[] { "Substance.name", } }, 
                new SearchParam() { Resource = "Substance", Name = "type", Description = @"The type of the substance", Type = ParamType.Token, Elements = new string[] { "Substance.type", } }, 
                new SearchParam() { Resource = "Supply", Name = "patient", Description = @"Patient", Type = ParamType.Reference, Elements = new string[] { "Supply.patient", } }, 
                new SearchParam() { Resource = "Supply", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "Supply", Name = "status", Description = @"Dispensed|Received|Requested", Type = ParamType.Token, Elements = new string[] { "Supply.status", } }, 
                new SearchParam() { Resource = "Supply", Name = "name", Description = @"The kind of supply (central, non-stock, etc)", Type = ParamType.Token, Elements = new string[] { "Supply.name", } }, 
                new SearchParam() { Resource = "Supply", Name = "dispenseid", Description = @"External identifier", Type = ParamType.Token, Elements = new string[] { "Supply.dispense.identifier", } }, 
                new SearchParam() { Resource = "Supply", Name = "identifier", Description = @"Unique identifier", Type = ParamType.Token, Elements = new string[] { "Supply.identifier", } }, 
                new SearchParam() { Resource = "Supply", Name = "supplier", Description = @"Dispenser", Type = ParamType.Reference, Elements = new string[] { "Supply.dispense.supplier", } }, 
                new SearchParam() { Resource = "Supply", Name = "dispensestatus", Description = @"Active/Completed/Aborted", Type = ParamType.Token, Elements = new string[] { "Supply.dispense.status", } }, 
                new SearchParam() { Resource = "ValueSet", Name = "system", Description = @"the system for any codes defined by this value set", Type = ParamType.Token, Elements = new string[] { "ValueSet.define.system", } }, 
                new SearchParam() { Resource = "ValueSet", Name = "_id", Description = @"The logical resource id associated with the resource (must be supported by all servers)", Type = ParamType.Token }, 
                new SearchParam() { Resource = "ValueSet", Name = "status", Description = @"the status of the value set", Type = ParamType.Token, Elements = new string[] { "ValueSet.status", } }, 
                new SearchParam() { Resource = "ValueSet", Name = "description", Description = @"Human language description of the value set", Type = ParamType.String, Elements = new string[] { "ValueSet.description", } }, 
                new SearchParam() { Resource = "ValueSet", Name = "name", Description = @"a portion of the name of the value set", Type = ParamType.String, Elements = new string[] { "ValueSet.name", } }, 
                new SearchParam() { Resource = "ValueSet", Name = "code", Description = @"a code defined in the value set", Type = ParamType.Token, Elements = new string[] { "ValueSet.define.concept.code", } }, 
                new SearchParam() { Resource = "ValueSet", Name = "identifier", Description = @"the identifier of the value set", Type = ParamType.Token, Elements = new string[] { "ValueSet.identifier", } }, 
                new SearchParam() { Resource = "ValueSet", Name = "reference", Description = @"a code system included or excluded in the value set or an imported value set", Type = ParamType.Token, Elements = new string[] { "ValueSet.compose.include.system", } }, 
                new SearchParam() { Resource = "ValueSet", Name = "version", Description = @"the version identifier of the value set", Type = ParamType.Token, Elements = new string[] { "ValueSet.version", } }, 
            };
        }
    }
